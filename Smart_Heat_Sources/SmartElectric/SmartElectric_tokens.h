// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash

#include "User_Typedefs.h"

// Identifier tags for tokens
// Creator for attribute: abs min heat setpoint limit, endpoint: 1
#define CREATOR_ABS_MIN_HEAT_SETPOINT_LIMIT_1 0xB000
#define NVM3KEY_ABS_MIN_HEAT_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB000 )
// Creator for attribute: abs max heat setpoint limit, endpoint: 1
#define CREATOR_ABS_MAX_HEAT_SETPOINT_LIMIT_1 0xB001
#define NVM3KEY_ABS_MAX_HEAT_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB001 )
// Creator for attribute: abs min cool setpoint limit, endpoint: 1
#define CREATOR_ABS_MIN_COOL_SETPOINT_LIMIT_1 0xB002
#define NVM3KEY_ABS_MIN_COOL_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB002 )
// Creator for attribute: abs max cool setpoint limit, endpoint: 1
#define CREATOR_ABS_MAX_COOL_SETPOINT_LIMIT_1 0xB003
#define NVM3KEY_ABS_MAX_COOL_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB003 )
// Creator for attribute: HVAC system type configuration, endpoint: 1
#define CREATOR_HVAC_SYSTEM_TYPE_CONFIGURATION_1 0xB004
#define NVM3KEY_HVAC_SYSTEM_TYPE_CONFIGURATION_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB004 )
// Creator for attribute: local temperature calibration, endpoint: 1
#define CREATOR_LOCAL_TEMPERATURE_CALIBRATION_1 0xB005
#define NVM3KEY_LOCAL_TEMPERATURE_CALIBRATION_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB005 )
// Creator for attribute: occupied cooling setpoint, endpoint: 1
#define CREATOR_OCCUPIED_COOLING_SETPOINT_1 0xB006
#define NVM3KEY_OCCUPIED_COOLING_SETPOINT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB006 )
// Creator for attribute: occupied heating setpoint, endpoint: 1
#define CREATOR_OCCUPIED_HEATING_SETPOINT_1 0xB007
#define NVM3KEY_OCCUPIED_HEATING_SETPOINT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB007 )
// Creator for attribute: min heat setpoint limit, endpoint: 1
#define CREATOR_MIN_HEAT_SETPOINT_LIMIT_1 0xB008
#define NVM3KEY_MIN_HEAT_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB008 )
// Creator for attribute: max heat setpoint limit, endpoint: 1
#define CREATOR_MAX_HEAT_SETPOINT_LIMIT_1 0xB009
#define NVM3KEY_MAX_HEAT_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB009 )
// Creator for attribute: min cool setpoint limit, endpoint: 1
#define CREATOR_MIN_COOL_SETPOINT_LIMIT_1 0xB00A
#define NVM3KEY_MIN_COOL_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00A )
// Creator for attribute: max cool setpoint limit, endpoint: 1
#define CREATOR_MAX_COOL_SETPOINT_LIMIT_1 0xB00B
#define NVM3KEY_MAX_COOL_SETPOINT_LIMIT_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00B )
// Creator for attribute: min setpoint dead band, endpoint: 1
#define CREATOR_MIN_SETPOINT_DEAD_BAND_1 0xB00C
#define NVM3KEY_MIN_SETPOINT_DEAD_BAND_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00C )
// Creator for attribute: control sequence of operation, endpoint: 1
#define CREATOR_CONTROL_SEQUENCE_OF_OPERATION_1 0xB00D
#define NVM3KEY_CONTROL_SEQUENCE_OF_OPERATION_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00D )
// Creator for attribute: system mode, endpoint: 1
#define CREATOR_SYSTEM_MODE_1 0xB00E
#define NVM3KEY_SYSTEM_MODE_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00E )
// Creator for attribute: start of week, endpoint: 1
#define CREATOR_START_OF_WEEK_1 0xB00F
#define NVM3KEY_START_OF_WEEK_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00F )
// Creator for attribute: number of weekly transitions, endpoint: 1
#define CREATOR_NUMBER_OF_WEEKLY_TRANSITIONS_1 0xB010
#define NVM3KEY_NUMBER_OF_WEEKLY_TRANSITIONS_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB010 )
// Creator for attribute: number of daily transitions, endpoint: 1
#define CREATOR_NUMBER_OF_DAILY_TRANSITIONS_1 0xB011
#define NVM3KEY_NUMBER_OF_DAILY_TRANSITIONS_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB011 )
// Creator for attribute: temperature setpoint hold, endpoint: 1
#define CREATOR_TEMPERATURE_SETPOINT_HOLD_1 0xB012
#define NVM3KEY_TEMPERATURE_SETPOINT_HOLD_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB012 )
// Creator for attribute: temperature setpoint hold duration, endpoint: 1
#define CREATOR_TEMPERATURE_SETPOINT_HOLD_DURATION_1 0xB013
#define NVM3KEY_TEMPERATURE_SETPOINT_HOLD_DURATION_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB013 )
// Creator for attribute: thermostat programming operation mode, endpoint: 1
#define CREATOR_THERMOSTAT_PROGRAMMING_OPERATION_MODE_1 0xB014
#define NVM3KEY_THERMOSTAT_PROGRAMMING_OPERATION_MODE_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB014 )
// User_Code
#define CREATOR_WEEK_FLAG 0xB015
#define CREATOR_WEEK_DATA_SUN 0xB016
#define CREATOR_WEEK_DATA_MON 0xB017
#define CREATOR_WEEK_DATA_TUE 0xB018
#define CREATOR_WEEK_DATA_WED 0xB019
#define CREATOR_WEEK_DATA_THU 0xB020
#define CREATOR_WEEK_DATA_FRI 0xB021
#define CREATOR_WEEK_DATA_SAT 0xB022

// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t  tokType_start_of_week;
typedef uint8_t  tokType_number_of_weekly_transitions;
typedef uint8_t  tokType_number_of_daily_transitions;
typedef uint8_t  tokType_temperature_setpoint_hold;
typedef uint16_t  tokType_temperature_setpoint_hold_duration;
typedef int16_t  tokType_min_heat_setpoint_limit;
typedef int16_t  tokType_max_heat_setpoint_limit;
typedef int16_t  tokType_min_cool_setpoint_limit;
typedef int8_t  tokType_min_setpoint_dead_band;
typedef int16_t  tokType_max_cool_setpoint_limit;
typedef uint8_t  tokType_control_sequence_of_operation;
typedef uint8_t  tokType_system_mode;
typedef int16_t  tokType_occupied_heating_setpoint;
typedef int16_t  tokType_occupied_cooling_setpoint;
typedef int8_t  tokType_local_temperature_calibration;
typedef int16_t  tokType_abs_max_cool_setpoint_limit;
typedef int16_t  tokType_abs_min_cool_setpoint_limit;
typedef int16_t  tokType_abs_max_heat_setpoint_limit;
typedef int16_t  tokType_abs_min_heat_setpoint_limit;
typedef uint8_t  tokType_thermostat_programming_operation_mode;
typedef uint8_t  tokType_hvac_system_type_configuration;
typedef uint8_t tokType_week_flag_t;
typedef day_setpoints_t tokType_day_data_t;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(ABS_MIN_HEAT_SETPOINT_LIMIT_1, tokType_abs_min_heat_setpoint_limit, 0)
DEFINE_BASIC_TOKEN(ABS_MAX_HEAT_SETPOINT_LIMIT_1, tokType_abs_max_heat_setpoint_limit, 4500)
DEFINE_BASIC_TOKEN(ABS_MIN_COOL_SETPOINT_LIMIT_1, tokType_abs_min_cool_setpoint_limit, 0)
DEFINE_BASIC_TOKEN(ABS_MAX_COOL_SETPOINT_LIMIT_1, tokType_abs_max_cool_setpoint_limit, 4500)
DEFINE_BASIC_TOKEN(HVAC_SYSTEM_TYPE_CONFIGURATION_1, tokType_hvac_system_type_configuration, 0x00)
DEFINE_BASIC_TOKEN(LOCAL_TEMPERATURE_CALIBRATION_1, tokType_local_temperature_calibration, 0x00)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_1, tokType_occupied_cooling_setpoint, 2700)
DEFINE_BASIC_TOKEN(OCCUPIED_HEATING_SETPOINT_1, tokType_occupied_heating_setpoint, 2500)
DEFINE_BASIC_TOKEN(MIN_HEAT_SETPOINT_LIMIT_1, tokType_min_heat_setpoint_limit, 0)
DEFINE_BASIC_TOKEN(MAX_HEAT_SETPOINT_LIMIT_1, tokType_max_heat_setpoint_limit, 4500)
DEFINE_BASIC_TOKEN(MIN_COOL_SETPOINT_LIMIT_1, tokType_min_cool_setpoint_limit, 0)
DEFINE_BASIC_TOKEN(MAX_COOL_SETPOINT_LIMIT_1, tokType_max_cool_setpoint_limit, 4500)
DEFINE_BASIC_TOKEN(MIN_SETPOINT_DEAD_BAND_1, tokType_min_setpoint_dead_band, 50)
DEFINE_BASIC_TOKEN(CONTROL_SEQUENCE_OF_OPERATION_1, tokType_control_sequence_of_operation, 0x02)
DEFINE_BASIC_TOKEN(SYSTEM_MODE_1, tokType_system_mode, 0x01)
DEFINE_BASIC_TOKEN(START_OF_WEEK_1, tokType_start_of_week, 1)
DEFINE_BASIC_TOKEN(NUMBER_OF_WEEKLY_TRANSITIONS_1, tokType_number_of_weekly_transitions, 7)
DEFINE_BASIC_TOKEN(NUMBER_OF_DAILY_TRANSITIONS_1, tokType_number_of_daily_transitions, 6)
DEFINE_BASIC_TOKEN(TEMPERATURE_SETPOINT_HOLD_1, tokType_temperature_setpoint_hold, 0x00)
DEFINE_BASIC_TOKEN(TEMPERATURE_SETPOINT_HOLD_DURATION_1, tokType_temperature_setpoint_hold_duration, 0xFFFF)
DEFINE_BASIC_TOKEN(THERMOSTAT_PROGRAMMING_OPERATION_MODE_1, tokType_thermostat_programming_operation_mode, 0x00)
DEFINE_BASIC_TOKEN(WEEK_FLAG, tokType_week_flag_t, 0)
DEFINE_BASIC_TOKEN(WEEK_DATA_SUN, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_MON, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_TUE, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_WED, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_THU, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_FRI, tokType_day_data_t, {{0}, {0}})
DEFINE_BASIC_TOKEN(WEEK_DATA_SAT, tokType_day_data_t, {{0}, {0}})
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[2]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_abs_min_heat_setpoint_limit *)ptr, TOKEN_ABS_MIN_HEAT_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_abs_max_heat_setpoint_limit *)ptr, TOKEN_ABS_MAX_HEAT_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_abs_min_cool_setpoint_limit *)ptr, TOKEN_ABS_MIN_COOL_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_abs_max_cool_setpoint_limit *)ptr, TOKEN_ABS_MAX_COOL_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_hvac_system_type_configuration *)ptr, TOKEN_HVAC_SYSTEM_TYPE_CONFIGURATION_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_local_temperature_calibration *)ptr, TOKEN_LOCAL_TEMPERATURE_CALIBRATION_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_occupied_heating_setpoint *)ptr, TOKEN_OCCUPIED_HEATING_SETPOINT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_min_heat_setpoint_limit *)ptr, TOKEN_MIN_HEAT_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_max_heat_setpoint_limit *)ptr, TOKEN_MAX_HEAT_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_min_cool_setpoint_limit *)ptr, TOKEN_MIN_COOL_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_max_cool_setpoint_limit *)ptr, TOKEN_MAX_COOL_SETPOINT_LIMIT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_min_setpoint_dead_band *)ptr, TOKEN_MIN_SETPOINT_DEAD_BAND_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_control_sequence_of_operation *)ptr, TOKEN_CONTROL_SEQUENCE_OF_OPERATION_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_system_mode *)ptr, TOKEN_SYSTEM_MODE_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_SYSTEM_MODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_start_of_week *)ptr, TOKEN_START_OF_WEEK_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_START_OF_WEEK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_number_of_weekly_transitions *)ptr, TOKEN_NUMBER_OF_WEEKLY_TRANSITIONS_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_number_of_daily_transitions *)ptr, TOKEN_NUMBER_OF_DAILY_TRANSITIONS_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_temperature_setpoint_hold *)ptr, TOKEN_TEMPERATURE_SETPOINT_HOLD_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_temperature_setpoint_hold_duration *)ptr, TOKEN_TEMPERATURE_SETPOINT_HOLD_DURATION_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_thermostat_programming_operation_mode *)ptr, TOKEN_THERMOSTAT_PROGRAMMING_OPERATION_MODE_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[2]; \
  MEMSET(allZeroData, 0, 2); \
  if ( data == NULL ) data = allZeroData; \
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0003 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ABS_MIN_HEAT_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0004 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ABS_MAX_HEAT_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0005 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ABS_MIN_COOL_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0006 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ABS_MAX_COOL_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0009 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_HVAC_SYSTEM_TYPE_CONFIGURATION_1, data); \
      if ( metadata->attributeId == 0x0010 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_LOCAL_TEMPERATURE_CALIBRATION_1, data); \
      if ( metadata->attributeId == 0x0011 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_1, data); \
      if ( metadata->attributeId == 0x0012 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_HEATING_SETPOINT_1, data); \
      if ( metadata->attributeId == 0x0015 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MIN_HEAT_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0016 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MAX_HEAT_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0017 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MIN_COOL_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0018 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MAX_COOL_SETPOINT_LIMIT_1, data); \
      if ( metadata->attributeId == 0x0019 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MIN_SETPOINT_DEAD_BAND_1, data); \
      if ( metadata->attributeId == 0x001B && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_CONTROL_SEQUENCE_OF_OPERATION_1, data); \
      if ( metadata->attributeId == 0x001C && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_SYSTEM_MODE_1, data); \
      if ( metadata->attributeId == 0x0020 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_START_OF_WEEK_1, data); \
      if ( metadata->attributeId == 0x0021 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_NUMBER_OF_WEEKLY_TRANSITIONS_1, data); \
      if ( metadata->attributeId == 0x0022 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_NUMBER_OF_DAILY_TRANSITIONS_1, data); \
      if ( metadata->attributeId == 0x0023 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMPERATURE_SETPOINT_HOLD_1, data); \
      if ( metadata->attributeId == 0x0024 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMPERATURE_SETPOINT_HOLD_DURATION_1, data); \
      if ( metadata->attributeId == 0x0025 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_THERMOSTAT_PROGRAMMING_OPERATION_MODE_1, data); \
    } \
  } \
} while(false)


